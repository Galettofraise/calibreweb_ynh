--- z/cps/ub.py	2019-01-16 17:50:51.000000000 +0100
+++ b/cps/ub.py	2019-01-19 11:03:55.799293389 +0100
@@ -148,6 +148,16 @@
     def __repr__(self):
         return '<User %r>' % self.nickname
 
+#Yunohost Integration - 1
+    #Login via LDAP method
+    @staticmethod
+    def try_login(username, password):
+        conn = get_ldap_connection()
+        conn.simple_bind_s(
+             config.config_ldap_dn.replace("%s", username),
+             password
+        )
+#END Yunohost Integration - 1
 
 # Baseclass for Users in Calibre-Web, settings which are depending on certain users are stored here. It is derived from
 # User Base (all access methods are declared there)
@@ -268,8 +278,8 @@
     domain = Column(String)
 
     def __repr__(self):
-        return u"<Registration('{0}')>".format(self.domain)
-
+        return u"<Registration('{0}')>".format(self.domain)      
+        
 
 # Baseclass for representing settings in app.db with email server settings and Calibre database settings
 # (application settings)
@@ -306,6 +316,11 @@
     config_use_goodreads = Column(Boolean)
     config_goodreads_api_key = Column(String)
     config_goodreads_api_secret = Column(String)
+#Yunohost Integration - 2
+    config_use_ldap = Column(Boolean)
+    config_ldap_provider_url = Column(String)
+    config_ldap_dn = Column(String)
+#END Yunohost Integration - 2
     config_mature_content_tags = Column(String)
     config_logfile = Column(String)
     config_ebookconverter = Column(Integer, default=0)
@@ -379,6 +394,11 @@
         self.config_use_goodreads = data.config_use_goodreads
         self.config_goodreads_api_key = data.config_goodreads_api_key
         self.config_goodreads_api_secret = data.config_goodreads_api_secret
+#Yunohost Integration - 3
+        self.config_use_ldap = data.config_use_ldap
+        self.config_ldap_provider_url = data.config_ldap_provider_url
+        self.config_ldap_dn = data.config_ldap_dn
+#END Yunohost Integration - 3
         if data.config_mature_content_tags:
             self.config_mature_content_tags = data.config_mature_content_tags
         else:
@@ -555,7 +575,7 @@
         conn.execute("ALTER TABLE Settings ADD column `config_use_google_drive` INTEGER DEFAULT 0")
         conn.execute("ALTER TABLE Settings ADD column `config_google_drive_folder` String DEFAULT ''")
         conn.execute("ALTER TABLE Settings ADD column `config_google_drive_watch_changes_response` String DEFAULT ''")
-        session.commit()
+        session.commit()        
     try:
         session.query(exists().where(Settings.config_columns_to_ignore)).scalar()
     except exc.OperationalError:
@@ -662,13 +682,22 @@
         conn.execute("ALTER TABLE Settings ADD column `config_calibre` String DEFAULT ''")
         session.commit()
     try:
+#Yunohost Integration - 4
+        session.query(exists().where(Settings.config_use_ldap)).scalar()
+    except exc.OperationalError:
+        conn = engine.connect()
+        conn.execute("ALTER TABLE Settings ADD column `config_use_ldap` INTEGER DEFAULT 0")
+        conn.execute("ALTER TABLE Settings ADD column `config_ldap_provider_url` String DEFAULT ''")
+        conn.execute("ALTER TABLE Settings ADD column `config_ldap_dn` String DEFAULT ''")
+        session.commit()
+    try:
+#END Yunohost Integration - 4
         session.query(exists().where(Settings.config_theme)).scalar()
     except exc.OperationalError:  # Database is not compatible, some rows are missing
         conn = engine.connect()
         conn.execute("ALTER TABLE Settings ADD column `config_theme` INTEGER DEFAULT 0")
         session.commit()
 
-
     # Remove login capability of user Guest
     conn = engine.connect()
     conn.execute("UPDATE user SET password='' where nickname = 'Guest' and password !=''")
@@ -778,6 +807,14 @@
     migrate_Database()
     clean_database()
 
+#Yunohost Integration - 5
+#get LDAP connection
+def get_ldap_connection():
+    import ldap
+    conn = ldap.initialize('ldap://{}'.format(config.config_ldap_provider_url))
+    return conn
+#END Yunohost Integration - 5
+
 # Generate global Settings Object accessible from every file
 config = Config()
 searched_ids = {}
