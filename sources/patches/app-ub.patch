--- a/cps/ub.py	2019-01-12 09:01:08.000000000 +0100
+++ b/cps/ub.py	2019-01-13 11:21:11.000000000 +0100
@@ -148,6 +148,14 @@
     def __repr__(self):
         return '<User %r>' % self.nickname
 
+    #Login via LDAP method
+    @staticmethod
+    def try_login(username, password):
+        conn = get_ldap_connection()
+        conn.simple_bind_s(
+             config.config_ldap_dn.replace("%s", username),
+             password
+        )
 
 # Baseclass for Users in Calibre-Web, settings which are depending on certain users are stored here. It is derived from
 # User Base (all access methods are declared there)
@@ -306,6 +314,9 @@
     config_use_goodreads = Column(Boolean)
     config_goodreads_api_key = Column(String)
     config_goodreads_api_secret = Column(String)
+    config_use_ldap = Column(Boolean)
+    config_ldap_provider_url = Column(String)
+    config_ldap_dn = Column(String)
     config_mature_content_tags = Column(String)
     config_logfile = Column(String)
     config_ebookconverter = Column(Integer, default=0)
@@ -379,6 +390,9 @@
         self.config_use_goodreads = data.config_use_goodreads
         self.config_goodreads_api_key = data.config_goodreads_api_key
         self.config_goodreads_api_secret = data.config_goodreads_api_secret
+        self.config_use_ldap = data.config_use_ldap
+        self.config_ldap_provider_url = data.config_ldap_provider_url
+        self.config_ldap_dn = data.config_ldap_dn
         if data.config_mature_content_tags:
             self.config_mature_content_tags = data.config_mature_content_tags
         else:
@@ -662,13 +676,20 @@
         conn.execute("ALTER TABLE Settings ADD column `config_calibre` String DEFAULT ''")
         session.commit()
     try:
+        session.query(exists().where(Settings.config_use_ldap)).scalar()
+    except exc.OperationalError:
+        conn = engine.connect()
+        conn.execute("ALTER TABLE Settings ADD column `config_use_ldap` INTEGER DEFAULT 0")
+        conn.execute("ALTER TABLE Settings ADD column `config_ldap_provider_url` String DEFAULT ''")
+        conn.execute("ALTER TABLE Settings ADD column `config_ldap_dn` String DEFAULT ''")
+        session.commit()
+    try:
         session.query(exists().where(Settings.config_theme)).scalar()
     except exc.OperationalError:  # Database is not compatible, some rows are missing
         conn = engine.connect()
         conn.execute("ALTER TABLE Settings ADD column `config_theme` INTEGER DEFAULT 0")
         session.commit()
 
-
     # Remove login capability of user Guest
     conn = engine.connect()
     conn.execute("UPDATE user SET password='' where nickname = 'Guest' and password !=''")
@@ -778,6 +799,12 @@
     migrate_Database()
     clean_database()
 
+#get LDAP connection
+def get_ldap_connection():
+    import ldap
+    conn = ldap.initialize('ldap://{}'.format(config.config_ldap_provider_url))
+    return conn
+
 # Generate global Settings Object accessible from every file
 config = Config()
 searched_ids = {}
